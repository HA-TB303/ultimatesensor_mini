## Optimized config for the Ultimatesensor Mini hardware by smarthomeshop.io
## Config made by https://espthings.io
## Read the full blog article at: https://www.espthings.io/ultimatesensor_mini
## This config utilizes the esp-idf framework and the adf pipeline for support of
## micro wake word locally on the esp32-s3 SOC.
substitutions:
  device_name: "ultimatesensor-mini-01"
  friendly_name: "Office presence"
  device_description: "Ultimatesensor Mini in the office"
  ## Hardware version -  This config is optimized for the "Ultimatesensor Mini Complete"
  ultimatesensor_mini_hardware_version: "V1-Complete"
  ## Preferred wake word, choose from: https://github.com/esphome/micro-wake-word-models/tree/main/models
  wake_word: hey_jarvis 
  ## Set the buildt in speaker volume percentage to prevent it from distorting
  speaker_volume: 50%
  ## Phases of the Voice Assistant
  ## IDLE: The voice assistant is ready to be triggered by a wake-word
  voice_assist_idle_phase_id: '1'
  ## LISTENING: The voice assistant is ready to listen to a voice command (after being triggered by the wake word)
  voice_assist_listening_phase_id: '2'
  ## THINKING: The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '3'
  ## REPLYING: The voice assistant is replying to the command
  voice_assist_replying_phase_id: '4'
  ## NOT_READY: The voice assistant is not ready
  voice_assist_not_ready_phase_id: '10'
  ## ERROR: The voice assistant encountered an error
  voice_assist_error_phase_id: '11'
  ## MUTED: The voice assistant is muted and will not reply to a wake-word
  voice_assist_muted_phase_id: '12'

external_components:
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: dev-next
    components: [ adf_pipeline, i2s_audio ]
    refresh: 0s

esphome:
  name: ${device_name}
  comment: ${device_description}
  friendly_name: ${friendly_name}
  project:
    name: "Ultimatesensor.mini"
    version: ${ultimatesensor_mini_hardware_version}
  min_version: 2025.1.0
  platformio_options:
    build_flags: -DBOARD_HAS_PSRAM
    board_build.flash_mode: dio
    board_upload.maximum_size: 16777216
  on_boot:
    priority: 200.0
    then:
      ## Set a volume limit to prevent the speaker from distorting
      - media_player.volume_set:
          id: adf_media_player
          volume: ${speaker_volume}
      ## Run the script to refresh the LED status
      ## If after 30 seconds, the device is still initializing (It did not yet connect to Home Assistant), 
      ## turn off the init_in_progress variable and run the script to refresh the LED status
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
                            
esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: 4.4.8
    sdkconfig_options:
      CONFIG_ESP32_S3_BOX_BOARD: "y"
      CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM: "16"
      CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM: "512"
      CONFIG_TCPIP_RECVMBOX_SIZE: "512"

      CONFIG_TCP_SND_BUF_DEFAULT: "65535"
      CONFIG_TCP_WND_DEFAULT: "512000"
      CONFIG_TCP_RECVMBOX_SIZE: "512"

logger:

globals:
  ## Global initialisation variable. 
  ## Initialized to "true" and set to "false" once everything is connected. 
  ## Only used to have a smooth plugging experience
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'
  ## Global variable tracking the phase of the voice assistant (defined above). 
  ## Initialized to not_ready
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}
  ## mmwave update time
  - id: mmwave_update_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

psram:
  mode: octal
  speed: 80MHz

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  enable_rrm: true

ota:
  - platform: esphome
    password: !secret ota_password

api:
  encryption:
    key: !secret api_key

## esp restart button
button:
  - platform: restart
    id: restart_btn
    name: "${friendly_name} REBOOT"

## Configure I2C for the SGP40, SCD41 and BH1750 sensor
i2c:
  id: bus_a
  sda: GPIO11
  scl: GPIO10
  scan: true

## esp status led
status_led:
  pin: GPIO19

## LD2450 mmwave on uart bus
uart:
  id: uart_bus
  tx_pin: 
    number: GPIO13
    mode:
      input: true
      pullup: true
  rx_pin: 
    number: GPIO14
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8
  debug:
    direction: BOTH
    dummy_receiver: True
    after:
     delimiter: [0X55, 0XCC]
    sequence:
      ## - lambda: UARTDebug::log_hex(direction, bytes, ' ');
      - lambda: |-
          if ((millis() - id(mmwave_update_time)) <= 1000) { 
            return;
          };
          id(mmwave_update_time) = millis();

          int16_t p1_x = (uint16_t((bytes[5] << 8) | bytes[4] ));
          if ((bytes[5] & 0x80) >> 7){
            p1_x -= pow(2, 15); 
          }else{
            p1_x = 0 - p1_x; // was 0 - p1_x;
          }
          p1_x = -p1_x;

          int16_t p1_y = (uint16_t((bytes[7] << 8) | bytes[6] ));
          if ((bytes[7] & 0x80) >> 7){
            p1_y -= pow(2, 15);
          }else{
            p1_y = 0 - p1_y;
          }

          float p1_speed = (bytes[9] << 8 | bytes[8] );
          if ((bytes[9] & 0x80) >> 7){
            p1_speed -= pow(2, 15);
          }else{
            p1_speed = 0 - p1_speed;
          }
          int16_t p1_distance_resolution = (uint16_t((bytes[11] << 8) | bytes[10] )); 

          int16_t p2_x = (uint16_t((bytes[13] << 8) | bytes[12] ));
          if ((bytes[13] & 0x80) >> 7){
            p2_x -=  pow(2, 15); 
          }else{
            p2_x = 0 - p2_x;
          }

          int16_t p2_y = (uint16_t((bytes[15] << 8) | bytes[14] ));
          if ((bytes[15] & 0x80) >> 7){
            p2_y -= pow(2, 15);
          }else{
            p2_y = 0 - p2_y;
          }

          float p2_speed = (bytes[17] << 8 | bytes[16] );
          if ((bytes[17] & 0x80) >> 7){
            p2_speed -= pow(2, 15);
          }else{
            p2_speed = 0 - p2_speed;
          }
          int16_t p2_distance_resolution = (uint16_t((bytes[19] << 8) | bytes[18] )); 

          int16_t p3_x = (uint16_t((bytes[21] << 8) | bytes[20] ));
          if ((bytes[21] & 0x80) >> 7){
            p3_x -=  pow(2, 15); 
          }else{
            p3_x = 0 - p3_x;
          }

          int16_t p3_y = (uint16_t((bytes[23] << 8) | bytes[22] ));
          if ((bytes[23] & 0x80) >> 7){
            p3_y -= pow(2, 15);
          }else{
            p3_y = 0 - p3_y;
          }

          float p3_speed = (bytes[25] << 8 | bytes[24] );
          if ((bytes[25] & 0x80) >> 7){
            p3_speed -= pow(2, 15);
          }else{
            p3_speed = 0 - p3_speed;
          }
          int16_t p3_distance_resolution = (uint16_t((bytes[27] << 8) | bytes[26] ));

          const float RADIANS_TO_DEGREES = 180.0 / 3.14159265358979323846;
          float p1_angle = atan2(p1_y, p1_x) * RADIANS_TO_DEGREES;
          float p2_angle = atan2(p2_y, p2_x) * RADIANS_TO_DEGREES;
          float p3_angle = atan2(p3_y, p3_x) * RADIANS_TO_DEGREES;
          
          float p1_distance = sqrt(p1_x * p1_x + p1_y * p1_y);
          float p2_distance = sqrt(p2_x * p2_x + p2_y * p2_y);
          float p3_distance = sqrt(p3_x * p3_x + p3_y * p3_y);
          

          float max_distance = float(id(maxx_distance).state) * 10;
          if (p1_distance < max_distance) {
            id(target1_x).publish_state(p1_x * -1);
            id(target1_y).publish_state(p1_y);
            id(target1_speed).publish_state(p1_speed / 100);
            id(target1_resolution).publish_state(p1_distance_resolution);
            id(target1_distance).publish_state(p1_distance);
            id(target1_angle).publish_state(p1_angle - 90);
          } else {
            id(target1_x).publish_state(0);
            id(target1_y).publish_state(0);
            id(target1_speed).publish_state(0);
            id(target1_resolution).publish_state(0);
            id(target1_distance).publish_state(0);
            id(target1_angle).publish_state(0);
          }

          if (p2_distance < max_distance) {
            id(target2_x).publish_state(p2_x);
            id(target2_y).publish_state(p2_y);
            id(target2_speed).publish_state(p2_speed / 100);
            id(target2_resolution).publish_state(p2_distance_resolution);
            id(target2_distance).publish_state(p2_distance);
            id(target2_angle).publish_state(p2_angle);
          } else {
            id(target2_x).publish_state(0);
            id(target2_y).publish_state(0);
            id(target2_speed).publish_state(0);
            id(target2_resolution).publish_state(0);
            id(target2_distance).publish_state(0);
            id(target2_angle).publish_state(0);
          }

          if (p3_distance < max_distance) {
            id(target3_x).publish_state(p3_x);
            id(target3_y).publish_state(p3_y);
            id(target3_speed).publish_state(p3_speed / 100);
            id(target3_resolution).publish_state(p3_distance_resolution);
            id(target3_distance).publish_state(p3_distance);
            id(target3_angle).publish_state(p3_angle);
          } else {
            id(target3_x).publish_state(0);
            id(target3_y).publish_state(0);
            id(target3_speed).publish_state(0);
            id(target3_resolution).publish_state(0);
            id(target3_distance).publish_state(0);
            id(target3_angle).publish_state(0);
          }

          int zone1_count = 0;      
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone1_begin_x).state && id(target1_x).state <= id(zone1_end_x).state) &&
                  (id(target1_y).state >= id(zone1_begin_y).state && id(target1_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone1_begin_x).state && id(target2_x).state <= id(zone1_end_x).state) &&
                  (id(target2_y).state >= id(zone1_begin_y).state && id(target2_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone1_begin_x).state && id(target3_x).state <= id(zone1_end_x).state) &&
                  (id(target3_y).state >= id(zone1_begin_y).state && id(target3_y).state <= id(zone1_end_y).state)) {
                  zone1_count++;
              }
          }

          if (zone1_count > 0) {
              id(zone1_occupancy).publish_state(true);
              id(zone1_target_count).publish_state(zone1_count);
          } else {
              id(zone1_occupancy).publish_state(false);
              id(zone1_target_count).publish_state(0);
          }

          int zone2_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone2_begin_x).state && id(target1_x).state <= id(zone2_end_x).state) &&
                  (id(target1_y).state >= id(zone2_begin_y).state && id(target1_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone2_begin_x).state && id(target2_x).state <= id(zone2_end_x).state) &&
                  (id(target2_y).state >= id(zone2_begin_y).state && id(target2_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone2_begin_x).state && id(target3_x).state <= id(zone2_end_x).state) &&
                  (id(target3_y).state >= id(zone2_begin_y).state && id(target3_y).state <= id(zone2_end_y).state)) {
                  zone2_count++;
              }
          }
          if (zone2_count > 0) {
              id(zone2_occupancy).publish_state(true);
              id(zone2_target_count).publish_state(zone2_count);
          } else {
              id(zone2_occupancy).publish_state(false);
              id(zone2_target_count).publish_state(0);
          }

          int zone3_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone3_begin_x).state && id(target1_x).state <= id(zone3_end_x).state) &&
                  (id(target1_y).state >= id(zone3_begin_y).state && id(target1_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone3_begin_x).state && id(target2_x).state <= id(zone3_end_x).state) &&
                  (id(target2_y).state >= id(zone3_begin_y).state && id(target2_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone3_begin_x).state && id(target3_x).state <= id(zone3_end_x).state) &&
                  (id(target3_y).state >= id(zone3_begin_y).state && id(target3_y).state <= id(zone3_end_y).state)) {
                  zone3_count++;
              }
          }
          if (zone3_count > 0) {
              id(zone3_occupancy).publish_state(true);
              id(zone3_target_count).publish_state(zone3_count);
          } else {
              id(zone3_occupancy).publish_state(false);
              id(zone3_target_count).publish_state(0);
          }

          int zone4_count = 0;
          if (id(target1_active).state == true ) {
              if ((id(target1_x).state >= id(zone4_begin_x).state && id(target1_x).state <= id(zone4_end_x).state) &&
                  (id(target1_y).state >= id(zone4_begin_y).state && id(target1_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (id(target2_active).state == true ) {
              if ((id(target2_x).state >= id(zone4_begin_x).state && id(target2_x).state <= id(zone4_end_x).state) &&
                  (id(target2_y).state >= id(zone4_begin_y).state && id(target2_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (id(target3_active).state == true ) {
              if ((id(target3_x).state >= id(zone4_begin_x).state && id(target3_x).state <= id(zone4_end_x).state) &&
                  (id(target3_y).state >= id(zone4_begin_y).state && id(target3_y).state <= id(zone4_end_y).state)) {
                  zone4_count++;
              }
          }
          if (zone4_count > 0) {
              id(zone4_occupancy).publish_state(true);
              id(zone4_target_count).publish_state(zone4_count);
          } else {
              id(zone4_occupancy).publish_state(false);
              id(zone4_target_count).publish_state(0);
          }

text_sensor:
  ## WiFi info
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP-address"
      icon: "mdi:network-outline"
    ssid:
      name: "${friendly_name} SSID"
    bssid:
      name: "${friendly_name} BSSID"
  ## ESPHome Version Info
  - platform: version
    id: text_sensor_version
    name: "${friendly_name} ESPHome Version"
  ## UltimateSensor Mini Info
  - platform: template
    id: text_sensor_ultimatesensor_mini_hardware_version
    name: "${friendly_name} Hardware Version"
    update_interval: 5h
    lambda: |-
      return {"${ultimatesensor_mini_hardware_version}"};

sensor:
  ## BH1750 Digital Ambient Light Sensor on I2C bus
  - platform: bh1750
    name: "${friendly_name} Illuminance"
    id: illuminance
    address: 0x23
    update_interval: 90s
  ## Configure the SGP40 Indoor air quality sensor (VOC)
  - platform: sgp4x
    voc:
      name: "${friendly_name} VOC Index"
    nox:
      name: "${friendly_name} NOx Index"
    update_interval: 70s
  ## Configure the SCD41 Co2 sensor on I2C bus
  - platform: scd4x
    id: my_scd41
    co2:
      name: "${friendly_name} CO2"
      id: scd41_co2
    temperature:
      name: "${friendly_name} Temperature"
      id: scd41_temperature
    temperature_offset: 2.3
    humidity:
      name: "${friendly_name} Humidity"
      id: scd41_humidity
      filters:
        offset: 3
    measurement_mode: low_power_periodic
    update_interval: 60s
  ## SPS30 Particulate Matter (PM) Sensor
  - platform: sps30
    pm_1_0:
      name: "${friendly_name} PM <1µm Weight concentration"
      id: "PM_1_0"
    pm_2_5:
      name: "${friendly_name} PM <2.5µm Weight concentration"
      id: "PM_2_5"
    pm_4_0:
      name: "${friendly_name} PM <4µm Weight concentration"
      id: "PM_4_0"
    pm_10_0:
      name: "${friendly_name} PM <10µm Weight concentration"
      id: "PM_10_0"
    pmc_0_5:
      name: "${friendly_name} PM <0.5µm Number concentration"
      id: "PMC_0_5"
    pmc_1_0:
      name: "${friendly_name} PM <1µm Number concentration"
      id: "PMC_1_0"
    pmc_2_5:
      name: "${friendly_name} PM <2.5µm Number concentration"
      id: "PMC_2_5"
    pmc_4_0:
      name: "${friendly_name} PM <4µm Number concentration"
      id: "PMC_4_0"
    pmc_10_0:
      name: "${friendly_name} PM <10µm Number concentration"
      id: "PMC_10_0"
    pm_size:
      name: "${friendly_name} PM Typical Particle size"
      id: "pm_size"
    address: 0x69
    update_interval: 115s
  ## LD2450 mmwave sensor template sensors
  - platform: template
    name: "${friendly_name} Target 1 X"
    id: target1_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 1 Y"
    id: target1_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 1 Speed"
    id: target1_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
  - platform: template
    name: "${friendly_name} Target 1 Resolution"
    id: target1_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 2 X"
    id: target2_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 2 Y"
    id: target2_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 2 Speed"
    id: target2_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
  - platform: template
    name: "${friendly_name} Target 2 Resolution"
    id: target2_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 3 X"
    id: target3_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 3 Y"
    id: target3_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 3 Speed"
    id: target3_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
  - platform: template
    name: "${friendly_name} Target 3 Resolution"
    id: target3_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 1 Angle"
    id: target1_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "${friendly_name} Target 2 Angle"
    id: target2_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "${friendly_name} Target 3 Angle"
    id: target3_angle
    accuracy_decimals: 0
    unit_of_measurement: '°'
    state_class: measurement
  - platform: template
    name: "${friendly_name} Target 1 Distance"
    id: target1_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 2 Distance"
    id: target2_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Target 3 Distance"
    id: target3_distance
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
  - platform: template
    name: "${friendly_name} Zone 1 Target Count"
    id: zone1_target_count
    accuracy_decimals: 0
  - platform: template
    name: "${friendly_name} Zone 2 Target Count"
    id: zone2_target_count
    accuracy_decimals: 0
  - platform: template
    name: "${friendly_name} Zone 3 Target Count"
    id: zone3_target_count
    accuracy_decimals: 0
  - platform: template
    name: "${friendly_name} Zone 4 Target Count"
    id: zone4_target_count
    accuracy_decimals: 0
    disabled_by_default: true

binary_sensor:
  ## mmwave template sensors
  - platform: template
    name: "${friendly_name} Occupancy"
    device_class: occupancy
    filters:
      - delayed_off: !lambda return (id(off_delay).state *1000);
    lambda: |-
      return (id(target1_distance).state != 0
        || id(target2_distance).state != 0
        || id(target3_distance).state != 0);
  - platform: template
    name: "${friendly_name} Zone 1 Occupancy"
    id: zone1_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_1_off_delay).state *1000);
  - platform: template
    name: "${friendly_name} Zone 2 Occupancy"
    id: zone2_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_2_off_delay).state *1000);
  - platform: template
    name: "${friendly_name} Zone 3 Occupancy"
    id: zone3_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_3_off_delay).state *1000);
  - platform: template
    name: "${friendly_name} Zone 4 Occupancy"
    id: zone4_occupancy
    filters:
      - delayed_off: !lambda return (id(zone_4_off_delay).state *1000);
    disabled_by_default: true
  - platform: template
    name: "${friendly_name} Target 1 Active"
    id: target1_active
    lambda: |-
      return id(target1_distance).state != 0;
  - platform: template
    name: "${friendly_name} Target 2 Active"
    id: target2_active
    lambda: |-
      return id(target2_distance).state != 0;
  - platform: template
    name: "${friendly_name} Target 3 Active"
    id: target3_active
    lambda: |-
      return id(target3_distance).state != 0;

number:
  ## mmwave template sensors
  - platform: template
    name: "${friendly_name} Occupancy Off Delay"
    id: off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
  - platform: template
    name: "${friendly_name} Max Distance"
    id: maxx_distance
    max_value: 600
    min_value: 0
    unit_of_measurement: "cm"
    step: 1
    optimistic: True
    restore_value: True
    initial_value: 600

  - platform: template
    name: "${friendly_name} Zone 1 Begin X"
    id: zone1_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: -4000
  - platform: template
    name: "${friendly_name} Zone 1 End X"
    id: zone1_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 4000
  - platform: template
    name: "${friendly_name} Zone 1 Begin Y"
    id: zone1_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 0
  - platform: template
    name: "${friendly_name} Zone 1 End Y"
    id: zone1_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    initial_value: 6000
  - platform: template
    name: "${friendly_name} Zone 1 Occupancy Off Delay"
    id: zone_1_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15

  - platform: template
    name: "${friendly_name} Zone 2 Begin X"
    id: zone2_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 2 End X"
    id: zone2_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 2 Begin Y"
    id: zone2_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 2 End Y"
    id: zone2_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 2 Occupancy Off Delay"
    id: zone_2_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15

  - platform: template
    name: "${friendly_name} Zone 3 Begin X"
    id: zone3_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 3 End X"
    id: zone3_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 3 Begin Y"
    id: zone3_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 3 End Y"
    id: zone3_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
  - platform: template
    name: "${friendly_name} Zone 3 Occupancy Off Delay"
    id: zone_3_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
  - platform: template
    name: "${friendly_name} Zone 4 Begin X"
    id: zone4_begin_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "${friendly_name} Zone 4 End X"
    id: zone4_end_x
    max_value: 4000
    min_value: -4000
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "${friendly_name} Zone 4 Begin Y"
    id: zone4_begin_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "${friendly_name} Zone 4 End Y"
    id: zone4_end_y
    max_value: 6000
    min_value: 0
    unit_of_measurement: "mm"
    step: 10
    optimistic: True
    restore_value: True
    disabled_by_default: true
  - platform: template
    name: "${friendly_name} Zone 4 Occupancy Off Delay"
    id: zone_4_off_delay
    max_value: 600
    min_value: 0
    step: 1
    optimistic: True
    restore_value: True
    unit_of_measurement: "s"
    initial_value: 15
    disabled_by_default: true

i2s_audio:
  - id: i2s_in
    i2s_lrclk_pin: GPIO7
    i2s_bclk_pin: GPIO16
  - id: i2s_out
    i2s_lrclk_pin: GPIO8
    i2s_bclk_pin: GPIO18

adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_out
    i2s_dout_pin: GPIO17

  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    i2s_audio_id: i2s_in
    i2s_din_pin: GPIO15
    pdm: false
    channel: right
    sample_rate: 16000
    bits_per_sample: 32bit

microphone:
  - platform: adf_pipeline
    id: adf_microphone
    keep_pipeline_alive: true
    pipeline:
      - adf_i2s_in
      - self
      
media_player:
  - platform: adf_pipeline
    id: adf_media_player
    name: "${friendly_name} Media Player"
    keep_pipeline_alive: true
    internal: false
    pipeline:
      - self
      - resampler
      - adf_i2s_out

micro_wake_word:
  models:
    - model:  ${wake_word}
  on_wake_word_detected:
      - media_player.stop:
      - light.turn_on:
          id: rgb_front_led
          blue: 0%
          red: 0%
          green: 100%
          brightness: 75%
          effect: "Slow Pulse"
      - voice_assistant.start:

voice_assistant:
  microphone: adf_microphone
  media_player: adf_media_player
  use_wake_word: false
  #vad_threshold: 3
  #noise_suppression_level: 1
  auto_gain: 31dBFS
  #volume_multiplier: 15.0
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - micro_wake_word.start:
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          - script.execute: reset_led
        else:
          - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
  on_client_disconnected:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - voice_assistant.stop
    - micro_wake_word.stop
    - light.turn_on:
          id: rgb_front_led
          blue: 0%
          red: 100%
          green: 100%
          brightness: 50%
          effect: connecting
  on_listening:
    - light.turn_on:
        id: rgb_front_led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 50%
        effect: "Slow Pulse"
  on_tts_start:
    - light.turn_on:
        id: rgb_front_led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 50%
        effect: "Slow Pulse"

  on_end:
      then:
        - light.turn_off:
            id: rgb_front_led
        - voice_assistant.stop
        - wait_until:
            not:
              media_player.is_playing:
        - script.execute: reset_led
        - if:
            condition:
              switch.is_on: use_wake_word
            then:
              - micro_wake_word.start:
  on_error:
    - light.turn_on:
        id: rgb_front_led
        blue: 0%
        red: 100%
        green: 0%
        brightness: 100%
        effect: none
    - delay: 1s
    - script.execute: reset_led
    - script.wait: reset_led
    - lambda: |-
        if (code == "wake-provider-missing" || code == "wake-engine-missing") {
          id(use_wake_word).turn_off();
        }
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - micro_wake_word.start:
          - script.execute: reset_led
              
script:
  - id: reset_led
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - light.turn_on:
                id: rgb_front_led
                blue: 100%
                red: 0%
                green: 0%
                brightness: 25%
                effect: none
          else:
            - light.turn_off: rgb_front_led
            
switch:
  - platform: template
    name: Enable Voice Assistant
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:assistant
    ## When the switch is turned on (on Home Assistant):
    ## Start the voice assistant component
    ## Set the correct phase and run the script to refresh the LED status
    on_turn_on:
      - logger.log: "switch on"
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - logger.log: "condition 1"
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
            - voice_assistant.stop
            - delay: 1s
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - logger.log: "Starting micro wake word"
                  - micro_wake_word.start:
      - script.execute: reset_led
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - voice_assistant.stop
            - micro_wake_word.stop
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: reset_led

  - platform: template
    name: "${friendly_name} Pipeline"
    id: pipeline_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_off:
      - media_player.stop

light:
  - platform: esp32_rmt_led_strip
    id: rgb_front_led
    name: "${friendly_name} Front LED"
    pin: GPIO05
    num_leds: 1
    rmt_channel: 1
    rgb_order: GRB
    chipset: ws2812
    default_transition_length: 0s
    effects:
      - addressable_color_wipe:
          name: "Connecting"
          colors:
            - red: 60%
              green: 60%
              blue: 60%
              num_leds: 1
            - red: 60%
              green: 60%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: true
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO20
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "${friendly_name} Back LED"
    id: rgb_back_led
